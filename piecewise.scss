@mixin piecewise($prop, $smallSize, $largeSize, $pxMin, $pxMax: $pxMin, $i:null) {
  @if (length($smallSize) != length($largeSize)) {
    @error 'Property values must have the same number of arguments.';
  }
  $pxMin: pixelize($pxMin);
  $pxMax: pixelize($pxMax);
  @if $pxMin != $pxMax or unitless($largeSize) {
    $largeSize: pixelize($largeSize);
  }
  @if $pxMin != $pxMax or unitless($smallSize) {
    $smallSize: pixelize($smallSize);
  }

  @media (min-width: $pxMax) {
    #{$prop}: $largeSize $i;
  }
  @if $pxMin != $pxMax {
    @media (min-width: $pxMin) and (max-width: $pxMax) {
      #{$prop}: getCalc($smallSize, $largeSize, $pxMin, $pxMax) $i;
    }
  }
  @media (max-width: $pxMin) {
    #{$prop}: $smallSize $i;
  }
}

@function getCalc($smallSize, $largeSize, $pxMin, $pxMax) {
  @if (length($smallSize) != length($largeSize)) {
    @error 'Property values must have the same number of arguments.';
  }
  $calcsList: ();
  @for $i from 1 through length($smallSize) {
    @if nth($smallSize, $i) != nth($largeSize, $i) {
      $calcsList: append(
        $calcsList,
        calc(#{pixelize(nth($smallSize, $i))} + (100vw - #{pixelize($pxMin)})/#{(
              $pxMax - $pxMin
            )/(nth($largeSize, $i) - nth($smallSize, $i))}
        )
      );
    } @else {
      $calcsList: append($calcsList, pixelize(nth($smallSize, $i)));
    }
  }
  @return $calcsList;
}

@function pixelize($list) {
  $newList: ();
  @for $i from 1 through length($list) {
    $newList: append($newList, stripUnit(nth($list, $i)) * 1px);
  }
  @return $newList;
}

@function stripUnit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}
