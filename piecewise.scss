@mixin piecewise($prop, $smallSize, $largeSize, $pxMin:null, $pxMax:null, $important:null) {
  $important: unquote($important);
  @if $pxMax == null {
    @if $pxMin == null and global-variable-exists(globalMax) {
      $pxMax: stripUnit($globalMax);
    } @else if variable-exists(pxMin){
       $pxMax: stripUnit($pxMin);
     } @else {
        @error 'Was expecting `$globalMax` to be defined.';
     }
  }
  @if $pxMin == null {
    @if global-variable-exists(globalMin){
      $pxMin: stripUnit($globalMin);
    } @else {
      @error 'Was expecting `$globalMin` to be defined.';
    }
  }
  
  @media (max-width: pixelize($pxMin)) {
    @if $pxMin != $pxMax or (type-of($largeSize) == number and listUnitless($smallSize)) {
      #{$prop}: pixelize($smallSize) $important;
    } @else {
      #{$prop}: $smallSize $important;
    }
  }
  @if $pxMin != $pxMax {
    @media (min-width: pixelize($pxMin)) and (max-width: pixelize($pxMax)) {
      #{$prop}: getCalcs($smallSize, $largeSize, $pxMin, $pxMax) $important;
    }
  }
  @media (min-width: pixelize($pxMax)) {
    @if $pxMin != $pxMax or (type-of($largeSize) == number and listUnitless($largeSize)) {
      #{$prop}: pixelize($largeSize) $important;
    } @else {
      #{$prop}: $largeSize $important;
    }
  }
}

@function getCalcs($smallSize, $largeSize, $pxMin, $pxMax) {
  @if (length($smallSize) != length($largeSize)) {
    $smallSize: nth(normalizeArgs($smallSize, $largeSize), 1);
    $largeSize: nth(normalizeArgs($smallSize, $largeSize), 2);
  }
  $calcsList: ();
  @for $i from 1 through length($smallSize) {
    $calcsList: append(
      $calcsList,
      calc(#{getCalc(nth($smallSize, $i), nth($largeSize, $i), $pxMin, $pxMax)})
    );
  }
  @return $calcsList;
}

@function getCalc($smallSize, $largeSize, $pxMin:null, $pxMax:null) {
  @if $pxMax == null {
    @if $pxMin == null and global-variable-exists(globalMax) {
      $pxMax: stripUnit($globalMax);
    } @else if variable-exists(pxMin){
       $pxMax: stripUnit($pxMin);
     } @else {
        @error 'Was expecting `$globalMax` to be defined.';
     }
  }
  @if $pxMin == null {
    @if global-variable-exists(globalMin){
      $pxMin: stripUnit($globalMin);
    } @else {
      @error 'Was expecting `$globalMin` to be defined.';
    }
  }
  
  @if $smallSize != $largeSize {
    @if stripUnit($smallSize) != 0 {
      @return #{pixelize($smallSize)} + #{'('}100vw - #{pixelize($pxMin)}#{')'}/#{(
                    $pxMax - $pxMin
                  )/(stripUnit($largeSize) - stripUnit($smallSize))}
    } @else {
      @return #{#{'('}100vw - #{pixelize($pxMin)}#{')'}/#{(
                    $pxMax - $pxMin
                  )/(stripUnit($largeSize) - stripUnit($smallSize))}}
    }
  } @else {
    @return pixelize($smallSize);
  }
}

@function normalizeArgs($smallSize, $largeSize){
  $max: max(length($smallSize), length($largeSize));
  $smallList: populateArgs($smallSize, $max);
  $largeList: populateArgs($largeSize, $max);
  @return ($smallList, $largeList);
}

@function populateArgs($list, $length){
  $newList: (nth($list, 1));
  @for $i from 2 through $length {
    @if length($list) >= $i {
      $newList: append($newList, nth($list, $i));
    } @else if $i == 4 and length($list) > 1 {
      $newList: append($newList, nth($list, 2));
    } @else {
      $newList: append($newList, nth($list, 1));
    }
  }
  @return $newList;
}

@function pixelize($list) {
  $newList: ();
  @for $i from 1 through length($list) {
    $newList: append($newList, stripUnit(nth($list, $i)) * 1px);
  }
  @return $newList;
}

@function stripUnit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@function listUnitless($list){
  $truthy: false;
  @for $i from 1 through length($list){
    @if unitless(nth($list, $i)) {
      $truthy: true;
    }
  }
  @return $truthy;
}

@mixin inversePiecewise($prop, $smallSize, $largeSize, $pxMin:null, $pxMax:null, $i:null) {
  @if $pxMax == null {
    @if $pxMin == null and global-variable-exists(globalMax) {
      $pxMax: stripUnit($globalMax);
    } @else if variable-exists(pxMin){
       $pxMax: stripUnit($pxMin);
     } @else {
        @error 'Was expecting `$globalMax` to be defined.';
     }
  }
  @if $pxMin == null {
    @if global-variable-exists(globalMin){
      $pxMin: stripUnit($globalMin);
    } @else {
      @error 'Was expecting `$globalMin` to be defined.';
    }
  }
  
  @media (max-width: pixelize($pxMin)) {
    @if $pxMin != $pxMax or listUnitless($smallSize) {
      #{$prop}: calc(100% - #{pixelize($smallSize)}) $i;
    } @else {
      #{$prop}: calc(100% - $smallSize) $i;
    }
  }
  @if $pxMin != $pxMax {
    @media (min-width: pixelize($pxMin)) and (max-width: pixelize($pxMax)) {
      #{$prop}: calc(100% - #{'('}#{getCalc($smallSize, $largeSize, $pxMin, $pxMax)}#{')'}) $i;
    }
  }
  @media (min-width: pixelize($pxMax)) {
    @if $pxMin != $pxMax or listUnitless($largeSize) {
      #{$prop}: calc(100% - #{pixelize($largeSize)}) $i;
    } @else {
      #{$prop}: calc(100% - $largeSize) $i;
    }
  }
}