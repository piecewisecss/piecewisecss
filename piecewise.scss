@mixin piecewise($prop, $smallSize, $largeSize, $pxMin, $pxMax: $pxMin, $i:null) {
  @media (max-width: pixelize($pxMin)) {
    @if $pxMin != $pxMax or listUnitless($smallSize) {
      #{$prop}: pixelize($smallSize) $i;
    } @else {
      #{$prop}: $smallSize $i;
    }
  }
  @if $pxMin != $pxMax {
    @media (min-width: pixelize($pxMin)) and (max-width: pixelize($pxMax)) {
      #{$prop}: getCalc(normalizeArgs($smallSize, $largeSize), $pxMin, $pxMax) $i;
    }
  }
  @media (min-width: pixelize($pxMax)) {
    @if $pxMin != $pxMax or listUnitless($largeSize) {
      #{$prop}: pixelize($largeSize) $i;
    } @else {
      #{$prop}: $largeSize $i;
    }
  }
}

@function normalizeArgs($smallSize, $largeSize){
  $max: max(length($smallSize), length($largeSize));
  $smallList: populateArgs($smallSize, $max);
  $largeList: populateArgs($largeSize, $max);
  @return ($smallList, $largeList);
}

@function populateArgs($list, $length){
  $newList: (nth($list, 1));
  @for $i from 2 through $length {
    @if length($list) >= $i {
      $newList: append($newList, nth($list, $i));
    } @else if $i == 4 and length($list) > 1 {
      $newList: append($newList, nth($list, 2));
    } @else {
      $newList: append($newList, nth($list, 1));
    }
  }
  @return $newList;
}

@function getCalc($sizes, $pxMin, $pxMax) {
  $smallSize: nth($sizes, 1);
  $largeSize: nth($sizes, 2);
  @if (length($smallSize) != length($largeSize)) {
    @error 'Property values must have the same number of arguments.';
  }
  $calcsList: ();
  @for $i from 1 through length($smallSize) {
    @if nth($smallSize, $i) != nth($largeSize, $i) {
      $calcsList: append(
        $calcsList,
        calc(#{pixelize(nth($smallSize, $i))} + (100vw - #{pixelize($pxMin)})/#{(
              $pxMax - $pxMin
            )/(stripUnit(nth($largeSize, $i)) - stripUnit(nth($smallSize, $i)))})
      );
    } @else {
      $calcsList: append($calcsList, pixelize(nth($smallSize, $i)));
    }
  }
  @return $calcsList;
}

@function pixelize($list) {
  $newList: ();
  @for $i from 1 through length($list) {
    $newList: append($newList, stripUnit(nth($list, $i)) * 1px);
  }
  @return $newList;
}

@function stripUnit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@function listUnitless($list){
  $truthy: false;
  @for $i from 1 through length($list){
    @if unitless(nth($list, $i)) {
      $truthy: true;
    }
  }
  @return $truthy;
}